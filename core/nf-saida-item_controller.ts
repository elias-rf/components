import { dbPlano } from '@/core/db/db-plano.db.js'
import { TAdapterKnex } from '@/orm/adapter-knex.js'
import { ormTable } from '@/orm/index.js'
import type { TSchema } from '@/schemas/schema.type.js'

export const ItemNota: TSchema = {
  table: 'ItemNota',
  primary: ['CdFilial', 'NumNota', 'Serie', 'Modelo'] as const,
  relations: {
    produto: {
      method: () =>
        import('./produto-plano_controller.js').then(
          (m) => m.produtoPlanoController.produtoPlano_read
        ),

      where: [['CdProduto', 'CdProduto']],
    },
  },
  fields: [
    'CdFilial',
    'NumNota',
    'Serie',
    'Modelo',
    'CdProduto',
    'Sequencia',
    'CdProdutoAssociado',
    'CdRefEstoque',
    'Quantidade',
    'QtdeAtendida',
    'ConversaoMedida',
    'Correcao',
    'VlUnitario',
    'VlTotal',
    'PercDesconto',
    'VlLiquido',
    'VlCusto',
    'BaseSub',
    'FgEstoque',
    'FgKit',
    'FgPeso',
    'ImprimeComponentes',
    'Irrf',
    'MargemSub',
    'Peso',
    'PesoBruto',
    'PesoLiq',
    'ReducaoICMS',
    'TaxaFCA',
    'TipoMovimentacao',
    'VlComissaoPrazo',
    'VlComissaoVista',
    'CdVendedor',
    'CdVendedorExtra',
    'PercComisVista',
    'PercComisPrazo',
    'PercReducaoComissao',
    'VlICMS',
    'VlIcmsSub',
    'VlIPI',
    'VlISS',
    'CustoMedio',
    'ComplementoDescricao',
    'FgEtiqueta',
    'PercLimiteComissao',
    'ComplementoDesc',
    'BaseCalculoIPI',
    'NumEtiqKanBan',
    'NumOrdemCompra',
    'VlComissaoVistaExtra',
    'VlComissaoPrazoExtra',
    'DtEmissao',
    'Tipo',
    'CRM',
    'Unidade',
    'VlImpostoDiferido',
    'Fg6142',
    'Nop',
    'NopFiscalItem',
    'fgBuscaDCB',
    'VlPrecoAnvisa',
    'AliqRedBaseST',
    'DescComplementarProd',
    'VlVendaOriginal',
    'SituacaoTributariaIPI',
    'CdEnquadramentoIPI',
    'AliquotaIPI',
    'AliquotaPIS',
    'VlPIS',
    'AliquotaCOFINS',
    'VlCOFINS',
    'SituacaoTributariaCOFINS',
    'BaseCalculoCOFINS',
    'SituacaoTributariaPIS',
    'BaseCalculoPIS',
    'AliquotaICMS',
    'BaseCalculoICMS',
    'SituacaoTributariaICMS',
    'FgICMSDiferimentoTotal',
    'CdBaseCalculoCreditoPISCOFINS',
    'CdTipoCreditoPISCOFINS',
    'CdContribuicaoApuradaPISCOFINS',
    'VlAproximadoImpostoItem',
    'VlFreteItem',
    'VlSeguroItem',
    'VlDespesaAcessoriaItem',
    'VlDescontoGerente',
    'FgConsideraItemNfe',
    'OrigemMercadoria',
    'PercentualMVA',
    'PercReducaoBaseSub',
    'PercICMSSub',
    'UFSub',
    'VlBaseCalculoICMSRetido',
    'VlICMSRetido',
    'VlBaseCalculoICMSDest',
    'VlICMSDest',
    'PercBaseOperacaoPropria',
    'AliquotaCreditoSimples',
    'VlCreditoSimples',
    'ModalidadeBaseICMS',
    'ModalidadeBaseSub',
    'MotivoDesoneracaoICMS',
    'FgEmprestimo',
    'PercDiferimento',
    'QuantidadeLitros',
    'VlIPILitro',
    'VlPISLitro',
    'VlCOFINSLitro',
    'VlAproximadoImpostoFederal',
    'VlAproximadoImpostoEstadual',
    'VlAproximadoImpostoMunicipal',
    'PlanoContaSped',
    'PercFCP',
    'VlBaseFCP',
    'VlFCP',
    'PercFCPST',
    'VlBaseFCPST',
    'VlFCPST',
    'VlBaseCalculoSTRetido',
    'VlICMSSTRetido',
    'AliquotaSTRetido',
    'VlICMSSubstituto',
  ] as const,
}

export type TNfSaidaItemFields = (typeof ItemNota.fields)[number]
export type TNfSaidaItemKeys = (typeof ItemNota.primary)[number]

function nfSaidaItemControllerFactory(db: TAdapterKnex, schema: TSchema) {
  const orm = ormTable<TNfSaidaItemFields, TNfSaidaItemKeys>(db, schema)
  return {
    nfSaidaItem_list: orm.rpc.list,
    nfSaidaItem_read: orm.rpc.read,
    nfSaidaItem_count: orm.rpc.count,
    nfSaidaItem_update: orm.rpc.update,
    nfSaidaItem_create: orm.rpc.create,
    nfSaidaItem_del: orm.rpc.del,
    nfSaidaItem_increment: orm.rpc.increment,
  }
}

export const nfSaidaItemController = nfSaidaItemControllerFactory(
  dbPlano,
  ItemNota
)
