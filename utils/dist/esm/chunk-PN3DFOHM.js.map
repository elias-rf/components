{
  "version": 3,
  "sources": ["../../src/calc-dv-cpf.ts"],
  "sourcesContent": ["import { calcMultiplicatorio } from \"./calc-multiplicatorio\";\n\n/**\n * Calcula os d\u00EDgitos verificadores de um CPF\n *\n * @param {string} cpf CPF com ou sem formato\n * @returns {string} D\u00EDgitos verificadores\n * @example <caption>Exemplos com diferentes formata\u00E7\u00F5es</caption>\n * calcCpfDv('003.709.877-21') // '21'\n * @example\n * calcCpfDv('00370987721') // '21'\n * @example\n * calcCpfDv('003709877') // '21'\n */\nexport function calcDvCpf(cpf: string) {\n  const multDig1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const multDig2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let dig1;\n  let dig2;\n\n  let str = cpf;\n  str = str.replace(/[^\\d]+/g, \"\");\n\n  if (str.substr(0, 9) === \"000000000\" || str.substr(0, 9) === \"111111111\") {\n    return null;\n  }\n\n  const numeros = str\n    .substring(0, 9)\n    .split(\"\")\n    .map((i) => parseInt(i, 10));\n\n  dig1 = calcMultiplicatorio(numeros, multDig1).reduce((a, b) => a + b, 0);\n  dig1 %= 11;\n  dig1 = dig1 > 9 ? 0 : dig1;\n  dig2 = calcMultiplicatorio(numeros.concat(dig1), multDig2).reduce(\n    (a, b) => a + b,\n    0\n  );\n  dig2 %= 11;\n  dig2 = dig2 > 9 ? 0 : dig2;\n  return `${dig1}${dig2}`;\n}\n"],
  "mappings": "wCAcO,SAASA,EAAUC,EAAa,CACrC,IAAMC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACrCC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAC1CC,EACAC,EAEAC,EAAML,EAGV,GAFAK,EAAMA,EAAI,QAAQ,UAAW,EAAE,EAE3BA,EAAI,OAAO,EAAG,CAAC,IAAM,aAAeA,EAAI,OAAO,EAAG,CAAC,IAAM,YAC3D,OAAO,KAGT,IAAMC,EAAUD,EACb,UAAU,EAAG,CAAC,EACd,MAAM,EAAE,EACR,IAAKE,GAAM,SAASA,EAAG,EAAE,CAAC,EAE7B,OAAAJ,EAAOK,EAAoBF,EAASL,CAAQ,EAAE,OAAO,CAACQ,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EACvEP,GAAQ,GACRA,EAAOA,EAAO,EAAI,EAAIA,EACtBC,EAAOI,EAAoBF,EAAQ,OAAOH,CAAI,EAAGD,CAAQ,EAAE,OACzD,CAACO,EAAGC,IAAMD,EAAIC,EACd,CACF,EACAN,GAAQ,GACRA,EAAOA,EAAO,EAAI,EAAIA,EACf,GAAGD,IAAOC,GACnB",
  "names": ["calcDvCpf", "cpf", "multDig1", "multDig2", "dig1", "dig2", "str", "numeros", "i", "calcMultiplicatorio", "a", "b"]
}
