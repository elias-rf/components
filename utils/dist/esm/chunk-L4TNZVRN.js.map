{
  "version": 3,
  "sources": ["../../src/type-guard.ts"],
  "sourcesContent": ["export function isDefined(\n  term: any\n): term is number | string | boolean | bigint | symbol | object | any[] {\n  return !isNull(term) && !isUndefined(term);\n}\n\nexport function isUndefined(term: any): term is undefined {\n  return typeof term === \"undefined\";\n}\n\nexport function isBoolean(term: any): term is boolean {\n  return typeof term === \"boolean\";\n}\n\nexport function isNumber(term: any): term is number {\n  return typeof term === \"number\" && !Number.isNaN(term);\n}\n\nexport function isString(term: any): term is string {\n  return typeof term === \"string\";\n}\n\nexport function isBigInt(term: any): term is bigint {\n  return typeof term === \"bigint\";\n}\n\nexport function isSymbol(term: any): term is symbol {\n  return typeof term === \"symbol\";\n}\n\nexport function isObjectOrNull<T extends object, U>(term: T | U): term is T {\n  return typeof term === \"object\";\n}\n\nexport function isNonEmptyArray<T, U>(term: Array<T> | U): term is Array<T> {\n  return isArray(term) && term.length > 0;\n}\n\nexport function isNonEmptyString<U>(term: string | U): term is string {\n  return isString(term) && term.length > 0;\n}\n\nexport function isNumberOrNaN<U>(term: number | U): term is number {\n  return typeof term === \"number\";\n}\n\nexport function isInteger(term: any): term is number {\n  return isNumber(term) && Number.isInteger(term);\n}\n\nexport function isPositiveInteger(term: any): term is number {\n  return isInteger(term) && term > 0;\n}\n\nexport function isNonNegativeInteger<U>(term: number | U): term is number {\n  return isInteger(term) && term >= 0;\n}\n\nexport function isNegativeInteger<U>(term: number | U): term is number {\n  return isInteger(term) && term < 0;\n}\n\nexport function isNull<T>(term: T | null): term is null {\n  return term === null;\n}\n\nexport function isFunction<T extends Function, U>(term: T | U): term is T {\n  return typeof term === \"function\";\n}\n\nexport function isObject<T extends object, U>(\n  term: T | U\n): term is NonNullable<T> {\n  return !isNull(term) && !isUndefined(term) && typeof term === \"object\";\n}\n\nexport function isArray<T, U>(term: Array<T> | U): term is Array<T> {\n  return Array.isArray(term);\n}\n\nexport function isMap<K, V, U>(term: Map<K, V> | U): term is Map<K, V> {\n  return term instanceof Map;\n}\n\nexport function isSet<T, U>(term: Set<T> | U): term is Set<T> {\n  return term instanceof Set;\n}\n\nexport function isWeakMap<K extends object, V, U>(\n  term: WeakMap<K, V> | U\n): term is WeakMap<K, V> {\n  return term instanceof WeakMap;\n}\n\nexport function isWeakSet<T extends object, U>(\n  term: WeakSet<T> | U\n): term is WeakSet<T> {\n  return term instanceof WeakSet;\n}\n\nexport function isDate(term: any): term is Date {\n  return term instanceof Date;\n}\n\nexport function isPromise(term: any): term is Promise<any> {\n  if (typeof term === \"object\" && typeof term.then === \"function\") return true;\n  return false;\n}\n\n/*\nfunction functionName(variableName: any): variableName is DesiredType {\n  // body that returns boolean\n}\n*/\n"],
  "mappings": "AAAO,SAASA,EACdC,EACsE,CACtE,MAAO,CAACC,EAAOD,CAAI,GAAK,CAACE,EAAYF,CAAI,CAC3C,CAEO,SAASE,EAAYF,EAA8B,CACxD,OAAO,OAAOA,EAAS,GACzB,CAEO,SAASG,EAAUH,EAA4B,CACpD,OAAO,OAAOA,GAAS,SACzB,CAEO,SAASI,EAASJ,EAA2B,CAClD,OAAO,OAAOA,GAAS,UAAY,CAAC,OAAO,MAAMA,CAAI,CACvD,CAEO,SAASK,EAASL,EAA2B,CAClD,OAAO,OAAOA,GAAS,QACzB,CAEO,SAASM,EAASN,EAA2B,CAClD,OAAO,OAAOA,GAAS,QACzB,CAEO,SAASO,EAASP,EAA2B,CAClD,OAAO,OAAOA,GAAS,QACzB,CAEO,SAASQ,EAAoCR,EAAwB,CAC1E,OAAO,OAAOA,GAAS,QACzB,CAEO,SAASS,EAAsBT,EAAsC,CAC1E,OAAOU,EAAQV,CAAI,GAAKA,EAAK,OAAS,CACxC,CAEO,SAASW,EAAoBX,EAAkC,CACpE,OAAOK,EAASL,CAAI,GAAKA,EAAK,OAAS,CACzC,CAEO,SAASY,EAAiBZ,EAAkC,CACjE,OAAO,OAAOA,GAAS,QACzB,CAEO,SAASa,EAAUb,EAA2B,CACnD,OAAOI,EAASJ,CAAI,GAAK,OAAO,UAAUA,CAAI,CAChD,CAEO,SAASc,EAAkBd,EAA2B,CAC3D,OAAOa,EAAUb,CAAI,GAAKA,EAAO,CACnC,CAEO,SAASe,EAAwBf,EAAkC,CACxE,OAAOa,EAAUb,CAAI,GAAKA,GAAQ,CACpC,CAEO,SAASgB,EAAqBhB,EAAkC,CACrE,OAAOa,EAAUb,CAAI,GAAKA,EAAO,CACnC,CAEO,SAASC,EAAUD,EAA8B,CACtD,OAAOA,IAAS,IAClB,CAEO,SAASiB,EAAkCjB,EAAwB,CACxE,OAAO,OAAOA,GAAS,UACzB,CAEO,SAASkB,EACdlB,EACwB,CACxB,MAAO,CAACC,EAAOD,CAAI,GAAK,CAACE,EAAYF,CAAI,GAAK,OAAOA,GAAS,QAChE,CAEO,SAASU,EAAcV,EAAsC,CAClE,OAAO,MAAM,QAAQA,CAAI,CAC3B,CAEO,SAASmB,EAAenB,EAAwC,CACrE,OAAOA,aAAgB,GACzB,CAEO,SAASoB,EAAYpB,EAAkC,CAC5D,OAAOA,aAAgB,GACzB,CAEO,SAASqB,EACdrB,EACuB,CACvB,OAAOA,aAAgB,OACzB,CAEO,SAASsB,EACdtB,EACoB,CACpB,OAAOA,aAAgB,OACzB,CAEO,SAASuB,EAAOvB,EAAyB,CAC9C,OAAOA,aAAgB,IACzB,CAEO,SAASwB,EAAUxB,EAAiC,CACzD,OAAI,OAAOA,GAAS,UAAY,OAAOA,EAAK,MAAS,UAEvD",
  "names": ["isDefined", "term", "isNull", "isUndefined", "isBoolean", "isNumber", "isString", "isBigInt", "isSymbol", "isObjectOrNull", "isNonEmptyArray", "isArray", "isNonEmptyString", "isNumberOrNaN", "isInteger", "isPositiveInteger", "isNonNegativeInteger", "isNegativeInteger", "isFunction", "isObject", "isMap", "isSet", "isWeakMap", "isWeakSet", "isDate", "isPromise"]
}
