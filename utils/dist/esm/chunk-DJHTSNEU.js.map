{
  "version": 3,
  "sources": ["../../src/zod.ts"],
  "sourcesContent": ["import { z as zod } from \"zod\";\n\nfunction joinValues<T extends any[]>(array: T, separator = \" | \"): string {\n  return array\n    .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n    .join(separator);\n}\n\nfunction assertNever(_x: never): never {\n  throw new Error();\n}\n\nexport const customErrorMap = (\n  issue: zod.ZodIssueOptionalMessage,\n  _ctx: any\n): { message: string } => {\n  let message: string;\n  switch (issue.code) {\n    case zod.ZodIssueCode.invalid_type:\n      if (issue.received === zod.ZodParsedType.undefined) {\n        message = \"Requerido\";\n      } else {\n        message = `Esperado ${issue.expected}, recebido ${issue.received}`;\n      }\n      break;\n    case zod.ZodIssueCode.invalid_literal:\n      message = `Valor literal inv\u00E1lido, esperado ${JSON.stringify(\n        issue.expected\n      )}`;\n      break;\n    case zod.ZodIssueCode.unrecognized_keys:\n      message = `Chave(s) n\u00E3o conhecida(s) no objeto: ${joinValues(\n        issue.keys,\n        \", \"\n      )}`;\n      break;\n    case zod.ZodIssueCode.invalid_union:\n      message = `Entrada Inv\u00E1lida`;\n      break;\n    case zod.ZodIssueCode.invalid_union_discriminator:\n      message = `Valor discriminador inv\u00E1lido. Esperado ${joinValues(\n        issue.options\n      )}`;\n      break;\n    case zod.ZodIssueCode.invalid_enum_value:\n      message = `Valor enum inv\u00E1lido. Esperado ${joinValues(\n        issue.options\n      )}, recebido '${issue.received}'`;\n      break;\n    case zod.ZodIssueCode.invalid_arguments:\n      message = `Argumentos da fun\u00E7\u00E3o inv\u00E1lidos`;\n      break;\n    case zod.ZodIssueCode.invalid_return_type:\n      message = `Retorno da fun\u00E7\u00E3o com tipo inv\u00E1lido`;\n      break;\n    case zod.ZodIssueCode.invalid_date:\n      message = `Data inv\u00E1lida`;\n      break;\n    case zod.ZodIssueCode.invalid_string:\n      if (issue.validation !== \"regex\")\n        message = `Inv\u00E1lido ${issue.validation}`;\n      else message = \"Inv\u00E1lido\";\n      break;\n    case zod.ZodIssueCode.too_small:\n      if (issue.type === \"array\")\n        message = `Matriz deve conter ${\n          issue.inclusive ? `no m\u00EDnimo` : `maior que`\n        } ${issue.minimum} elemento(s)`;\n      else if (issue.type === \"string\")\n        message = `Texto deve conter ${\n          issue.inclusive ? `no m\u00EDnimo` : `mais que`\n        } ${issue.minimum} caractere(s)`;\n      else if (issue.type === \"number\")\n        message = `N\u00FAmero deve ser maior que ${\n          issue.inclusive ? `ou igual a ` : ``\n        }${issue.minimum}`;\n      else message = \"Entrada Inv\u00E1lida\";\n      break;\n    case zod.ZodIssueCode.too_big:\n      if (issue.type === \"array\")\n        message = `Matriz deve conter ${\n          issue.inclusive ? `no m\u00E1ximo` : `menor que`\n        } ${issue.maximum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `Texto deve conter ${\n          issue.inclusive ? `no m\u00E1ximo` : `abaixo de`\n        } ${issue.maximum} caractere(s)`;\n      else if (issue.type === \"number\")\n        message = `N\u00FAmero deve ser menor que ${\n          issue.inclusive ? `ou igual a ` : ``\n        }${issue.maximum}`;\n      else message = \"Entrada Inv\u00E1lida\";\n      break;\n    case zod.ZodIssueCode.custom:\n      message = `Entrada Inv\u00E1lida`;\n      break;\n    case zod.ZodIssueCode.invalid_intersection_types:\n      message = `Interse\u00E7\u00E3o dos resultados n\u00E3o pode ser combinada`;\n      break;\n    case zod.ZodIssueCode.not_multiple_of:\n      message = `N\u00FAmero deve ser m\u00FAltiplo de ${issue.multipleOf}`;\n      break;\n    default:\n      message = _ctx.defaultError;\n      assertNever(issue);\n  }\n  return { message };\n};\n\nzod.setErrorMap(customErrorMap);\nexport const z: any = zod;\n"],
  "mappings": "AAAA,OAAS,KAAKA,MAAW,MAEzB,SAASC,EAA4BC,EAAUC,EAAY,MAAe,CACxE,OAAOD,EACJ,IAAKE,GAAS,OAAOA,GAAQ,SAAW,IAAIA,KAASA,CAAI,EACzD,KAAKD,CAAS,CACnB,CAEA,SAASE,EAAYC,EAAkB,CACrC,MAAM,IAAI,KACZ,CAEO,IAAMC,EAAiB,CAC5BC,EACAC,IACwB,CACxB,IAAIC,EACJ,OAAQF,EAAM,WACPR,EAAI,aAAa,aAChBQ,EAAM,WAAaR,EAAI,cAAc,UACvCU,EAAU,YAEVA,EAAU,YAAYF,EAAM,sBAAsBA,EAAM,WAE1D,WACGR,EAAI,aAAa,gBACpBU,EAAU,uCAAoC,KAAK,UACjDF,EAAM,QACR,IACA,WACGR,EAAI,aAAa,kBACpBU,EAAU,2CAAwCT,EAChDO,EAAM,KACN,IACF,IACA,WACGR,EAAI,aAAa,cACpBU,EAAU,sBACV,WACGV,EAAI,aAAa,4BACpBU,EAAU,6CAA0CT,EAClDO,EAAM,OACR,IACA,WACGR,EAAI,aAAa,mBACpBU,EAAU,oCAAiCT,EACzCO,EAAM,OACR,gBAAgBA,EAAM,YACtB,WACGR,EAAI,aAAa,kBACpBU,EAAU,0CACV,WACGV,EAAI,aAAa,oBACpBU,EAAU,+CACV,WACGV,EAAI,aAAa,aACpBU,EAAU,mBACV,WACGV,EAAI,aAAa,eAChBQ,EAAM,aAAe,QACvBE,EAAU,eAAYF,EAAM,aACzBE,EAAU,cACf,WACGV,EAAI,aAAa,UAChBQ,EAAM,OAAS,QACjBE,EAAU,sBACRF,EAAM,UAAY,eAAc,eAC9BA,EAAM,sBACHA,EAAM,OAAS,SACtBE,EAAU,qBACRF,EAAM,UAAY,eAAc,cAC9BA,EAAM,uBACHA,EAAM,OAAS,SACtBE,EAAU,gCACRF,EAAM,UAAY,cAAgB,KACjCA,EAAM,UACNE,EAAU,sBACf,WACGV,EAAI,aAAa,QAChBQ,EAAM,OAAS,QACjBE,EAAU,sBACRF,EAAM,UAAY,eAAc,eAC9BA,EAAM,qBACHA,EAAM,OAAS,SACtBE,EAAU,qBACRF,EAAM,UAAY,eAAc,eAC9BA,EAAM,uBACHA,EAAM,OAAS,SACtBE,EAAU,gCACRF,EAAM,UAAY,cAAgB,KACjCA,EAAM,UACNE,EAAU,sBACf,WACGV,EAAI,aAAa,OACpBU,EAAU,sBACV,WACGV,EAAI,aAAa,2BACpBU,EAAU,4DACV,WACGV,EAAI,aAAa,gBACpBU,EAAU,qCAA+BF,EAAM,aAC/C,cAEAE,EAAUD,EAAK,aACfJ,EAAYG,CAAK,EAErB,MAAO,CAAE,QAAAE,CAAQ,CACnB,EAEAV,EAAI,YAAYO,CAAc,EACvB,IAAMI,EAASX",
  "names": ["zod", "joinValues", "array", "separator", "val", "assertNever", "_x", "customErrorMap", "issue", "_ctx", "message", "z"]
}
