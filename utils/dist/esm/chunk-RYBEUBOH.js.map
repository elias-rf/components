{
  "version": 3,
  "sources": ["../../src/random.ts"],
  "sourcesContent": ["export function Random(seed?: number) {\n  if (seed === undefined) {\n    seed = new Date().getTime();\n  }\n\n  const N = 624;\n  const M = 397;\n  const MATRIX_A = 0x9908b0df; /* constant vector a */\n  const UPPER_MASK = 0x80000000; /* most significant w-r bits */\n  const LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n  const mt = new Array(N); /* the array for the state vector */\n  let mti = N + 1; /* mti==N+1 means mt[N] is not initialized */\n\n  mt[0] = seed >>> 0;\n  for (mti = 1; mti < N; mti++) {\n    var s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n    mt[mti] =\n      ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) +\n      (s & 0x0000ffff) * 1812433253 +\n      mti;\n    mt[mti] >>>= 0;\n  }\n\n  const rndInt = () => {\n    let y;\n    var mag01 = new Array(0x0, MATRIX_A);\n\n    if (mti >= N) {\n      var kk;\n\n      for (kk = 0; kk < N - M; kk++) {\n        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);\n        mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      for (; kk < N - 1; kk++) {\n        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);\n        mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);\n      mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n      mti = 0;\n    }\n\n    y = mt[mti++];\n\n    y ^= y >>> 11;\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= y >>> 18;\n\n    return y >>> 0;\n  };\n\n  const rnd = {\n    rand: () => rndInt() * (1.0 / 4294967296.0),\n    range: (from = -1000, to = 1000): number => {\n      return Math.floor(from + (to - from + 1) * rnd.rand());\n    },\n    weighted: (weights: number[]): number => {\n      const total = weights.reduce((a, b) => a + b, 0);\n      const r = rnd.rand() * total;\n      let sum = 0;\n      for (let i = 0; i < weights.length; i++) {\n        sum += weights[i];\n        if (sum >= r) {\n          return i;\n        }\n      }\n      return weights.length - 1;\n    },\n  };\n  return rnd;\n}\n"],
  "mappings": "AAAO,SAASA,EAAOC,EAAe,CAChCA,IAAS,SACXA,EAAO,IAAI,KAAK,EAAE,QAAQ,GAG5B,IAAMC,EAAI,IACJC,EAAI,IACJC,EAAW,WACXC,EAAa,WACbC,EAAa,WAEbC,EAAK,IAAI,MAAML,CAAC,EAClBM,EAAMN,EAAI,EAGd,IADAK,EAAG,GAAKN,IAAS,EACZO,EAAM,EAAGA,EAAMN,EAAGM,IAAO,CAC5B,IAAIC,EAAIF,EAAGC,EAAM,GAAMD,EAAGC,EAAM,KAAO,GACvCD,EAAGC,MACGC,EAAI,cAAgB,IAAM,YAAe,KAC5CA,EAAI,OAAc,WACnBD,EACFD,EAAGC,MAAU,CACf,CAEA,IAAME,EAAS,IAAM,CACnB,IAAIC,EACJ,IAAIC,EAAQ,IAAI,MAAM,EAAKR,CAAQ,EAEnC,GAAII,GAAON,EAAG,CACZ,IAAIW,EAEJ,IAAKA,EAAK,EAAGA,EAAKX,EAAIC,EAAGU,IACvBF,EAAKJ,EAAGM,GAAMR,EAAeE,EAAGM,EAAK,GAAKP,EAC1CC,EAAGM,GAAMN,EAAGM,EAAKV,GAAMQ,IAAM,EAAKC,EAAMD,EAAI,GAE9C,KAAOE,EAAKX,EAAI,EAAGW,IACjBF,EAAKJ,EAAGM,GAAMR,EAAeE,EAAGM,EAAK,GAAKP,EAC1CC,EAAGM,GAAMN,EAAGM,GAAMV,EAAID,IAAOS,IAAM,EAAKC,EAAMD,EAAI,GAEpDA,EAAKJ,EAAGL,EAAI,GAAKG,EAAeE,EAAG,GAAKD,EACxCC,EAAGL,EAAI,GAAKK,EAAGJ,EAAI,GAAMQ,IAAM,EAAKC,EAAMD,EAAI,GAE9CH,EAAM,CACR,CAEA,OAAAG,EAAIJ,EAAGC,KAEPG,GAAKA,IAAM,GACXA,GAAMA,GAAK,EAAK,WAChBA,GAAMA,GAAK,GAAM,WACjBA,GAAKA,IAAM,GAEJA,IAAM,CACf,EAEMG,EAAM,CACV,KAAM,IAAMJ,EAAO,GAAK,EAAM,YAC9B,MAAO,CAACK,EAAO,KAAOC,EAAK,MAClB,KAAK,MAAMD,GAAQC,EAAKD,EAAO,GAAKD,EAAI,KAAK,CAAC,EAEvD,SAAWG,GAA8B,CACvC,IAAMC,EAAQD,EAAQ,OAAO,CAAC,EAAGE,IAAM,EAAIA,EAAG,CAAC,EACzCC,EAAIN,EAAI,KAAK,EAAII,EACnBG,EAAM,EACV,QAASC,EAAI,EAAGA,EAAIL,EAAQ,OAAQK,IAElC,GADAD,GAAOJ,EAAQK,GACXD,GAAOD,EACT,OAAOE,EAGX,OAAOL,EAAQ,OAAS,CAC1B,CACF,EACA,OAAOH,CACT",
  "names": ["Random", "seed", "N", "M", "MATRIX_A", "UPPER_MASK", "LOWER_MASK", "mt", "mti", "s", "rndInt", "y", "mag01", "kk", "rnd", "from", "to", "weights", "total", "b", "r", "sum", "i"]
}
