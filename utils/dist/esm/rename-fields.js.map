{
  "version": 3,
  "sources": ["../../src/rename-fields.ts"],
  "sourcesContent": ["import { GenericObject } from \"@er/types/*\";\nimport { isEmpty } from \"./is-empty\";\nimport { isArray, isObject } from \"./type-guard\";\n\nexport function renameString(\n  name = \"\",\n  nameList: string[],\n  targetList: string[]\n) {\n  const idx = nameList.indexOf(name);\n  if (idx >= 0) return targetList[idx];\n  return name;\n}\n\nexport function renameWhere(\n  tupleArray: any[],\n  sourceList: string[],\n  targetList: string[]\n) {\n  if (isEmpty(tupleArray)) return tupleArray;\n  return tupleArray.map((whr) => {\n    whr[0] = renameString(whr[0], sourceList, targetList);\n    return whr;\n  });\n}\n\nexport function renameOrder(\n  tupleArray: any[],\n  sourceList: string[],\n  targetList: string[]\n) {\n  if (isEmpty(tupleArray)) return tupleArray;\n  return tupleArray.map((whr) => {\n    whr[0] = renameString(whr[0], sourceList, targetList);\n    return whr;\n  });\n}\n\nexport function renameSelect(\n  nameArray: string[],\n  sourceList: string[],\n  targetList: string[]\n) {\n  if (isEmpty(nameArray)) return nameArray;\n  return nameArray.map((field) => {\n    const fieldIdx = sourceList.indexOf(field);\n    if (fieldIdx > -1) {\n      // throw new Error(`Campo ${field} n\u00E3o encontrado`);\n      field = targetList[fieldIdx];\n    }\n    return field;\n  });\n}\n\nexport function renamePk<Rec extends GenericObject>(\n  data: Rec,\n  sourceList: string[],\n  targetList: string[]\n): Rec {\n  if (!isObject(data)) return data;\n  const rsp = {} as Rec;\n  Object.keys(data).map((prop) => {\n    const newProp: keyof Rec = renameString(prop, sourceList, targetList);\n    rsp[newProp] = data[prop];\n  });\n  return rsp;\n}\n\nexport function renameData<Rec extends GenericObject>(\n  data: Rec,\n  sourceList: string[],\n  targetList: string[]\n): Rec {\n  if (!isObject(data)) return data;\n  const rsp = {} as Rec;\n  Object.keys(data).map((prop) => {\n    const newProp: keyof Rec = renameString(prop, sourceList, targetList);\n    rsp[newProp] = data[prop];\n  });\n  return rsp;\n}\n\nexport function renameDataArray<Rec extends GenericObject>(\n  data: Rec[],\n  sourceList: string[],\n  targetList: string[]\n): Rec[] {\n  if (!isArray(data)) return data;\n  return data.map((rec) => {\n    return renamePk<Rec>(rec, sourceList, targetList);\n  });\n}\n"],
  "mappings": "mHAIO,SAASA,EACdC,EAAO,GACPC,EACAC,EACA,CACA,IAAMC,EAAMF,EAAS,QAAQD,CAAI,EACjC,OAAIG,GAAO,EAAUD,EAAWC,GACzBH,CACT,CAEO,SAASI,EACdC,EACAC,EACAJ,EACA,CACA,OAAIK,EAAQF,CAAU,EAAUA,EACzBA,EAAW,IAAKG,IACrBA,EAAI,GAAKT,EAAaS,EAAI,GAAIF,EAAYJ,CAAU,EAC7CM,EACR,CACH,CAEO,SAASC,EACdJ,EACAC,EACAJ,EACA,CACA,OAAIK,EAAQF,CAAU,EAAUA,EACzBA,EAAW,IAAKG,IACrBA,EAAI,GAAKT,EAAaS,EAAI,GAAIF,EAAYJ,CAAU,EAC7CM,EACR,CACH,CAEO,SAASE,EACdC,EACAL,EACAJ,EACA,CACA,OAAIK,EAAQI,CAAS,EAAUA,EACxBA,EAAU,IAAKC,GAAU,CAC9B,IAAMC,EAAWP,EAAW,QAAQM,CAAK,EACzC,OAAIC,EAAW,KAEbD,EAAQV,EAAWW,IAEdD,CACT,CAAC,CACH,CAEO,SAASE,EACdC,EACAT,EACAJ,EACK,CACL,GAAI,CAACc,EAASD,CAAI,EAAG,OAAOA,EAC5B,IAAME,EAAM,CAAC,EACb,cAAO,KAAKF,CAAI,EAAE,IAAKG,GAAS,CAC9B,IAAMC,EAAqBpB,EAAamB,EAAMZ,EAAYJ,CAAU,EACpEe,EAAIE,GAAWJ,EAAKG,EACtB,CAAC,EACMD,CACT,CAEO,SAASG,EACdL,EACAT,EACAJ,EACK,CACL,GAAI,CAACc,EAASD,CAAI,EAAG,OAAOA,EAC5B,IAAME,EAAM,CAAC,EACb,cAAO,KAAKF,CAAI,EAAE,IAAKG,GAAS,CAC9B,IAAMC,EAAqBpB,EAAamB,EAAMZ,EAAYJ,CAAU,EACpEe,EAAIE,GAAWJ,EAAKG,EACtB,CAAC,EACMD,CACT,CAEO,SAASI,EACdN,EACAT,EACAJ,EACO,CACP,OAAKoB,EAAQP,CAAI,EACVA,EAAK,IAAKQ,GACRT,EAAcS,EAAKjB,EAAYJ,CAAU,CACjD,EAH0Ba,CAI7B",
  "names": ["renameString", "name", "nameList", "targetList", "idx", "renameWhere", "tupleArray", "sourceList", "isEmpty", "whr", "renameOrder", "renameSelect", "nameArray", "field", "fieldIdx", "renamePk", "data", "isObject", "rsp", "prop", "newProp", "renameData", "renameDataArray", "isArray", "rec"]
}
