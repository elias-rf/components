{
  "version": 3,
  "sources": ["../../src/request.ts"],
  "sourcesContent": ["/**\n * Permite fazer requisi\u00E7\u00F5es HTTP usando como base a Fetch.api\n */\n\ntype Headers = { [key: string]: string };\ntype Request = {\n  method: string;\n  url: string;\n  headers: Headers;\n  body?: string;\n  query?: any;\n};\n\ntype Response = \"json\" | \"blob\" | \"text\" | \"raw\";\n\n/**\n * Make a generic request\n *\n * @param  request Request to be made. Must be of the form: {method, url, query [optional]}\n * @param responseType any value of the RESPONSE_TYPES map. Defaults to 'json'\n * @private\n */\nfunction makeRequest({\n  request,\n  responseType = \"json\",\n}: {\n  request: Request;\n  responseType?: Response;\n}) {\n  const headers = request.headers || {};\n\n  // Don't set the body if it's a GET request as it will crash on Microsoft Edge\n  const params: { headers: Headers; method: string; body?: any } = {\n    headers,\n    method: request.method || \"GET\",\n  };\n  if (params.method !== \"GET\") {\n    params.body = request.body || null;\n  }\n\n  // Append query params\n  if (request.query) {\n    const qs = Object.keys(request.query)\n      .map((k) => {\n        let keyValue = `${encodeURIComponent(k)}=`;\n        if (Array.isArray(request.query[k])) {\n          keyValue += request.query[k].join(`&${encodeURIComponent(k)}=`);\n        } else if (typeof request.query[k] === \"object\") {\n          keyValue += encodeURIComponent(JSON.stringify(request.query[k]));\n        } else {\n          keyValue += encodeURIComponent(request.query[k]);\n        }\n        return keyValue;\n      })\n      .join(\"&\");\n    request.url += `?${qs}`;\n  }\n\n  // Do the API Request\n  return fetch(request.url, params).then((res: any) => {\n    switch (responseType) {\n      case \"json\":\n        return res.json();\n      case \"blob\":\n        return res.blob();\n      case \"text\":\n        return res.text();\n      default:\n        return res;\n    }\n  });\n}\n\nconst api = {\n  baseUrl: \"\",\n  headers: {},\n  RESPONSE_TYPES: { json: \"json\", blob: \"blob\", text: \"text\", raw: \"raw\" },\n\n  /**\n   * Monta um request com Query e GET como padr\u00E3o\n   */\n  formRequestQuery({\n    method = \"GET\",\n    url,\n    headers,\n    query,\n  }: {\n    method?: string;\n    url: string;\n    headers?: Headers;\n    query?: any;\n  }) {\n    const theUrl =\n      url.indexOf(\"http\") > -1 || url.indexOf(\"www\") > -1\n        ? url\n        : `${this.baseUrl || \"\"}${url}`;\n    return {\n      method,\n      url: theUrl,\n      headers: Object.assign({}, this.headers, headers),\n      query,\n    };\n  },\n\n  /**\n   * Monta um request com Data stringified e POST como default\n   */\n  formRequestData({\n    method,\n    url,\n    headers,\n    data,\n  }: {\n    method: string;\n    url: string;\n    headers?: Headers;\n    data: any;\n  }) {\n    const theUrl =\n      url.indexOf(\"http\") > -1 || url.indexOf(\"www\") > -1\n        ? url\n        : `${this.baseUrl || \"\"}${url}`;\n    return {\n      method,\n      url: theUrl,\n      body: JSON.stringify(data),\n      headers: Object.assign(\n        {},\n        {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        this.headers,\n        headers\n      ),\n    };\n  },\n\n  /**\n   * Monta um request do tipo POST com Data\n   */\n  formPostRequest({\n    url,\n    headers,\n    data,\n  }: {\n    url: string;\n    headers?: Headers;\n    data: any;\n  }) {\n    const theUrl =\n      url.indexOf(\"http\") > -1 || url.indexOf(\"www\") > -1\n        ? url\n        : `${this.baseUrl || \"\"}${url}`;\n    return {\n      method: \"POST\",\n      url: theUrl,\n      body: data,\n      headers: Object.assign({}, this.headers, headers),\n    };\n  },\n\n  /**\n   * Set a global baseURL to prefix all URLs with\n   * @param baseUrl - The base URL\n   */\n  setBaseUrl(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  },\n\n  /**\n   * Set global headers instead of setting the same headers on each call.\n   * @param headers - headers object\n   */\n  setHeaders(headers: Headers) {\n    this.headers = {};\n    if (typeof headers === \"object\") {\n      this.headers = headers;\n    }\n  },\n\n  /**\n   * Make a GET request\n   *\n   * @param  url API url to make request to\n   * @param headers HTTP Headers\n   * @param query Query object\n   * @param responseType any value of the RESPONSE_TYPES map. Defaults to 'json'\n   */\n  get({\n    url,\n    headers,\n    query,\n    responseType,\n  }: {\n    url: string;\n    headers?: Headers;\n    query?: any;\n    responseType?: Response;\n  }) {\n    const request = this.formRequestQuery({ url, headers, query });\n\n    return makeRequest({\n      request,\n      responseType,\n    });\n  },\n\n  /**\n   * Make a PUT request\n   *\n   * @param url API url to make request to\n   * @param data The data to be updated\n   * @param headers HTTP Headers\n   * @param responseType any value of the RESPONSE_TYPES map. Defaults to 'json'\n   */\n  put({\n    url,\n    data,\n    headers,\n    responseType,\n  }: {\n    url: string;\n    data: any;\n    headers?: Headers;\n    responseType?: Response;\n  }) {\n    const request = this.formRequestData({\n      method: \"PUT\",\n      url,\n      headers,\n      data,\n    });\n    return makeRequest({\n      request,\n      responseType,\n    });\n  },\n\n  /**\n   * Make a PATCH request\n   *\n   * @param {String} url API url to make request to\n   * @param {Object} data The data to be updated\n   * @param {Object} [headers] HTTP Headers\n   * @param {String} [responseType] any value of the RESPONSE_TYPES map. Defaults to 'json'\n   */\n  patch({\n    url,\n    data,\n    headers,\n    responseType,\n  }: {\n    url: string;\n    data: any;\n    headers?: Headers;\n    responseType?: Response;\n  }) {\n    const request = this.formRequestData({\n      method: \"PATCH\",\n      url,\n      headers,\n      data,\n    });\n    return makeRequest({\n      request,\n      responseType,\n    });\n  },\n\n  /**\n   * Make a POST JSON request\n   *\n   * @param url API url to make request to\n   * @param data The data to be inserted\n   * @param headers HTTP Headers\n   * @param responseType any value of the RESPONSE_TYPES map. Defaults to 'json'\n   */\n  post({\n    url,\n    data,\n    headers,\n    responseType,\n  }: {\n    url: string;\n    data: any;\n    headers?: Headers;\n    responseType?: Response;\n  }) {\n    const request = this.formRequestData({\n      method: \"POST\",\n      url,\n      headers,\n      data,\n    });\n    return makeRequest({\n      request,\n      responseType,\n    });\n  },\n\n  /**\n   * Make a POST form data request\n   *\n   * @param url API url to make request to\n   * @param data Form data to be inserted\n   * @param headers HTTP Headers\n   */\n  postForm({\n    url,\n    data,\n    headers,\n  }: {\n    url: string;\n    data: any;\n    headers?: Headers;\n  }) {\n    const request = this.formPostRequest({ url, data, headers });\n    return makeRequest({ request });\n  },\n\n  /**\n   * Make a DELETE request\n   *\n   * @param url API url to make request to\n   * @param headers HTTP Headers\n   * @param query Query string\n   */\n  delete({\n    url,\n    headers,\n    query,\n  }: {\n    url: string;\n    headers?: Headers;\n    query?: any;\n  }) {\n    const request = this.formRequestQuery({\n      method: \"DELETE\",\n      url,\n      headers,\n      query,\n    });\n    return makeRequest({ request });\n  },\n};\n\nexport default api;\nexport const RESPONSE_TYPES = api.RESPONSE_TYPES;\n"],
  "mappings": "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",
  "names": ["makeRequest", "request", "responseType", "params", "qs", "k", "keyValue", "res", "api", "method", "url", "headers", "query", "theUrl", "data", "baseUrl", "request_default", "RESPONSE_TYPES"]
}
