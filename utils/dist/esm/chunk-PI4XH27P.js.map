{
  "version": 3,
  "sources": ["../../src/fetch-mock.ts"],
  "sourcesContent": ["const map = new Map();\nlet history_: any[] = [];\n\nexport const fetchMock = {\n  mock(matcher: string, response: any) {\n    response.status = response.status || 200;\n    map.set(matcher, response);\n  },\n  get(matcher: string, response: any) {},\n  post(matcher: string, response: any) {},\n  history(index?: number) {\n    if (index !== undefined) return history_[index];\n    return history_;\n  },\n  reset() {\n    map.clear();\n    history_ = [];\n  },\n  fetch(url: any, options?: any): Promise<any> {\n    history_.push({ url, options });\n    return Promise.resolve({\n      json: () => {\n        if (!map.has(url)) {\n          return `${url} n\u00E3o encontrado`;\n        }\n        const rsp = map.get(url).body;\n        if (options && options.body) {\n          const body = JSON.parse(options.body);\n          rsp.id = body.id || \"\";\n        }\n        return Promise.resolve(rsp);\n      },\n      status: map.has(url) ? map.get(url)?.status : 404,\n    });\n  },\n};\n"],
  "mappings": "AAAA,IAAMA,EAAM,IAAI,IACZC,EAAkB,CAAC,EAEVC,EAAY,CACvB,KAAKC,EAAiBC,EAAe,CACnCA,EAAS,OAASA,EAAS,QAAU,IACrCJ,EAAI,IAAIG,EAASC,CAAQ,CAC3B,EACA,IAAID,EAAiBC,EAAe,CAAC,EACrC,KAAKD,EAAiBC,EAAe,CAAC,EACtC,QAAQC,EAAgB,CACtB,OAAIA,IAAU,OAAkBJ,EAASI,GAClCJ,CACT,EACA,OAAQ,CACND,EAAI,MAAM,EACVC,EAAW,CAAC,CACd,EACA,MAAMK,EAAUC,EAA6B,CAC3C,OAAAN,EAAS,KAAK,CAAE,IAAAK,EAAK,QAAAC,CAAQ,CAAC,EACvB,QAAQ,QAAQ,CACrB,KAAM,IAAM,CACV,GAAI,CAACP,EAAI,IAAIM,CAAG,EACd,MAAO,GAAGA,sBAEZ,IAAME,EAAMR,EAAI,IAAIM,CAAG,EAAE,KACzB,GAAIC,GAAWA,EAAQ,KAAM,CAC3B,IAAME,EAAO,KAAK,MAAMF,EAAQ,IAAI,EACpCC,EAAI,GAAKC,EAAK,IAAM,EACtB,CACA,OAAO,QAAQ,QAAQD,CAAG,CAC5B,EACA,OAAQR,EAAI,IAAIM,CAAG,EAAIN,EAAI,IAAIM,CAAG,GAAG,OAAS,GAChD,CAAC,CACH,CACF",
  "names": ["map", "history_", "fetchMock", "matcher", "response", "index", "url", "options", "rsp", "body"]
}
